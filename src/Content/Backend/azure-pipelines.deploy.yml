parameters:
  vmImage: 'windows-latest'
  deploymentEnvironment: ''
  variableGroup: ''
  azureResourceManagerConnection: ''

jobs: 
- deployment: Deploy_Backend
  displayName: Deploy ${{ parameters.deploymentEnvironment }}
  
  pool:
    vmImage: ${{ parameters.vmImage }}

  environment: ${{ parameters.deploymentEnvironment }}

  variables:
  - group: ${{ parameters.variableGroup }}

  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: none

        - task: DownloadBuildArtifacts@0
          displayName: 'Download artifact'
          inputs:
            buildType: current
            downloadType: single
            artifactName: drop

        - task: AzureResourceManagerTemplateDeployment@3
          displayName: 'Run ARM Template'
          inputs:
            azureResourceManagerConnection: ${{ parameters.azureResourceManagerConnection }}
            subscriptionId: $(AzureSubscriptionId)
            resourceGroupName: '$(ResourceGroup)'
            location: '$(Location)'
            csmFile: '$(Pipeline.Workspace)/drop/azure.azrm.json'
            overrideParameters: '-projectName $(ProjectName) -environment $(Environment) -billTo $(BillTo) -managedBy $(ManagedBy) -location $(Location) -appServicePlanSku $(AppServicePlanSku) -appServicePlanDefaultInstanceCount $(AppServicePlanDefaultInstanceCount) -autoScaling $(AppServicePlanAutoScaling) -diagnosticsLogsLevel $(DiagnosticsLogsLevel) -diagnosticsLogsRetentionInDays $(DiagnosticsLogsRetentionInDays) -webTestsLocations $(WebTestsLocations) -appConfigurationSku $(AppConfigurationSku) -useStagingSlots $(UseStagingSlots)'
            
        - task: AzureRmWebAppDeployment@4
          displayName: 'Deploy AppService'
          inputs:
            azureSubscription: ${{ parameters.azureResourceManagerConnection }}
            appType: webAppLinux
            WebAppName: '$(ProjectName)-$(Environment)-site'
            ${{ if eq(variables.UseStagingSlots, true) }}:
              deployToSlotOrASE: true
              SlotName: staging
            ResourceGroupName: '$(ResourceGroup)'
            packageForLinux: '$(Pipeline.Workspace)/drop/Web'
            StartupCommand: 'dotnet NV.Templates.Backend.Web.dll'

        - task: AzureRmWebAppDeployment@4
          displayName: 'Deploy FunctionApp'
          inputs:
            azureSubscription: ${{ parameters.azureResourceManagerConnection }}
            appType: functionAppLinux
            WebAppName: '$(ProjectName)-$(Environment)-func'
            ${{ if eq(variables.UseStagingSlots, true) }}:
              deployToSlotOrASE: true
              SlotName: staging
            ResourceGroupName: '$(ResourceGroup)'
            package: '$(Pipeline.Workspace)/drop/Functions'
            
        - task: AzureAppServiceManage@0
          displayName: 'Swap AppService Slots'
          condition: and(succeeded(), eq(variables['UseStagingSlots'], true))
          inputs:
            azureSubscription: ${{ parameters.azureResourceManagerConnection }}
            WebAppName: '$(ProjectName)-$(Environment)-site'
            ResourceGroupName: '$(ResourceGroup)'
            SourceSlot: staging