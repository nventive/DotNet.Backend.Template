{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "apiProfile": "2018-06-01-profile",
  "parameters": {
    "projectName": {
      "type": "string",
      "maxLength": 8,
      "metadata": {
        "description": "The abbreviated project name (lower case)."
      }
    },
    "environment": {
      "type": "string",
      "maxLength": 4,
      "metadata": {
        "description": "The abbreviated environment (lower case)."
      }
    },
    "billTo": {
      "type": "string",
      "metadata": {
        "description": "Bill To / Internal Chargeback ID (for resource tags)."
      }
    },
    "managedBy": {
      "type": "string",
      "metadata": {
        "description": "Operator or Directly Responsible Individual (DRI) (for resource tags)."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location in which the resources should be deployed."
      }
    },
    "appServicePlanKind": {
      "type": "string",
      "defaultValue": "linux",
      "metadata": {
        "description": "The kind of machines for the hosting plan (Windows or Linux). Defaults to Windows."
      }
    },
    "appServicePlanSku": {
      "type": "string",
      "defaultValue": "P1V2",
      "metadata": {
        "description": "Describes plan's pricing tier and capacity. Check details at https://azure.microsoft.com/en-us/pricing/details/app-service/"
      }
    },
    "appServicePlanDefaultInstanceCount": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "The default number of machines in the hosting. Defaults to 2."
      }
    },
    "autoScaling": {
      "type": "object",
      "defaultValue": {
        "enabled": true,
        "minimumCapacity": 2,
        "maximumCapacity": 10,
        "scaleUpCPUThresholdPercentage": 80.0,
        "scaleDownCPUThresholdPercentage": 40.0,
        "scaleUpMemoryThresholdPercentage": 80.0,
        "scaleDownMemoryThresholdPercentage": 40.0,
        "scaleUpIncreaseBy": 1,
        "scaleUpCooldown": "PT10M",
        "scaleDownDecreaseBy": 1,
        "scaleDownCooldown": "PT1H"
      },
      "metadata": {
        "description": "Auto-scaling parameters."
      }
    },
    "useStagingSlots": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Adds staging slots to app services. Must be disable on specific SKUs because it is not supported."
      }
    },
    "diagnosticsLogsLevel": {
      "type": "string",
      "defaultValue": "Warning",
      "allowedValues": [
        "Verbose",
        "Information",
        "Warning",
        "Error"
      ],
      "metadata": {
        "description": "The degree of severity for diagnostics logs."
      }
    },
    "diagnosticsLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 90,
      "metadata": {
        "description": "Number of days for which the diagnostics logs will be retained."
      }
    },
    "webTestsLocations": {
      "type": "array",
      "defaultValue": [
        {
          "Id": "us-ca-sjc-azr"
        },
        {
          "Id": "us-il-ch1-azr"
        },
        {
          "Id": "us-va-ash-azr"
        }
      ],
      "metadata": {
        "description": "The origin locations where health checks pings are issued from."
      }
    },
    "cacheSku": {
      "type": "string",
      "defaultValue": "Standard",
      "metadata": {
        "description": "The pricing tier of the new Azure Redis Cache (Basic, Standard, Premium)."
      }
    },
    "cacheSkuFamily": {
      "type": "string",
      "defaultValue": "C",
      "metadata": {
        "description": "The family for the sku for the new Azure Redis Cache (C or P)."
      }
    },
    "cacheCapacity": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The size of the new Azure Redis Cache instance."
      }
    },
    "keyVaultSkuName": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard",
        "Premium"
      ],
      "metadata": {
        "description": "Specifies whether the key vault is a standard vault or a premium vault."
      }
    },
    "keyVaultSkuFamily": {
      "type": "string",
      "defaultValue": "A",
      "metadata": {
        "description": "SKU family name"
      }
    },
    "appConfigurationSku": {
      "type": "string",
      "defaultValue": "free",
      "allowedValues": [
        "free",
        "standard"
      ],
      "metadata": {
        "description": "The pricing tier of App Configuration"
      }
    }
  },
  "variables": {
    "tags": {
      "project": "[parameters('projectName')]",
      "environment": "[parameters('environment')]",
      "billTo": "[parameters('billTo')]",
      "managedBy": "[parameters('managedBy')]"
    },
    "storageAccountName": "[toLower(concat(parameters('projectName'), parameters('environment'), 'stg'))]",
    "slotsStorageAccountName": "[toLower(concat(parameters('projectName'), parameters('environment'), 'slotsstg'))]",
    "appInsightsName": "[toLower(concat(parameters('projectName'), '-', parameters('environment'), '-ai'))]",
    "configStoreName": "[toLower(concat(parameters('projectName'), '-', parameters('environment'), '-config'))]",
    "cacheName": "[toLower(concat(parameters('projectName'), '-', parameters('environment'), '-cache'))]",
    "serverfarmsName": "[toLower(concat(parameters('projectName'), '-', parameters('environment'), '-plan'))]",
    "siteName": "[toLower(concat(parameters('projectName'), '-', parameters('environment'), '-site'))]",
    "serverfarmsAutoScaleName": "[toLower(concat(parameters('projectName'), '-', parameters('environment'), '-planscale'))]",
    "webLogsContainerName": "weblogs",
    "containerSasRequestContent": {
      "signedServices": "bfqt",
      "signedPermission": "rwdlacup",
      "signedStart": "2019-12-01T00:00:00Z",
      "signedExpiry": "2219-12-01T00:00:00Z",
      "signedResourceTypes": "sco"
    },
    "functionsAppName": "[toLower(concat(parameters('projectName'), '-', parameters('environment'), '-func'))]",
    "keyVaultName": "[toLower(concat(parameters('projectName'), '-', parameters('environment'), '-kv'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2021-04-01",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_GRS",
        "tier": "Standard"
      },
      "resources": [
        {
          "type": "blobServices/containers",
          "name": "[concat('default/', variables('webLogsContainerName'))]",
          "apiVersion": "2019-04-01",
          "tags": "[variables('tags')]",
          "dependsOn": [
            "[variables('storageAccountName')]"
          ],
          "properties": {
            "publicAccess": "Blob"
          }
        }
      ]
    },
    {
      "condition": "[parameters('useStagingSlots')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('slotsStorageAccountName')]",
      "apiVersion": "2021-04-01",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_GRS",
        "tier": "Standard"
      },
      "resources": [
        {
          "condition": "[parameters('useStagingSlots')]",
          "type": "blobServices/containers",
          "name": "[concat('default/', variables('webLogsContainerName'))]",
          "apiVersion": "2019-04-01",
          "tags": "[variables('tags')]",
          "dependsOn": [
            "[variables('slotsStorageAccountName')]"
          ],
          "properties": {
            "publicAccess": "Blob"
          }
        }
      ]
    },
    {
      "type": "Microsoft.Insights/components",
      "name": "[variables('appInsightsName')]",
      "apiVersion": "2015-05-01",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "kind": "web",
      "properties": {
        "ApplicationId": "[variables('appInsightsName')]",
        "Application_Type": "web"
      }
    },
    {
      "type": "Microsoft.AppConfiguration/configurationStores",
      "name": "[variables('configStoreName')]",
      "apiVersion": "2019-11-01-preview",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "sku": {
        "name": "[parameters('appConfigurationSku')]"
      },
      "properties": {
      }
    },
    {
      "type": "Microsoft.Cache/Redis",
      "name": "[variables('cacheName')]",
      "apiVersion": "2020-12-01",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "properties": {
        "enableNonSslPort": false,
        "sku": {
          "name": "[parameters('cacheSku')]",
          "family": "[parameters('cacheSkuFamily')]",
          "capacity": "[parameters('cacheCapacity')]"
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2021-06-01-preview",
      "location": "[resourceGroup().location]",
      "tags": "[variables('tags')]",
      "name": "[variables('keyVaultName')]",
      "properties": {
        "sku": {
          "name": "[parameters('keyVaultSkuName')]",
          "family": "[parameters('keyVaultSkuFamily')]"
        },
        "accessPolicies": [
        ],
        "tenantId": "[subscription().tenantId]",
        "enabledForDeployment": false,
        "enabledForTemplateDeployment": true,
        "enabledForVolumeEncryption": false,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 90
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2021-06-01-preview",
      "name": "[concat(variables('keyVaultName'),'/add')]",
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantid]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('siteName')), '2021-01-15', 'Full').identity.principalId]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            }
          },
          {
            "tenantId": "[subscription().tenantid]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('functionsAppName')), '2021-01-15', 'Full').identity.principalId]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('siteName'))]",
        "[resourceId('Microsoft.Web/sites', variables('functionsAppName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "condition": "[parameters('useStagingSlots')]",
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2021-06-01-preview",
      "name": "[concat(variables('keyVaultName'),'slots','/add')]",
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantid]",
            "objectId": "[if(equals(parameters('useStagingSlots'), 'true' ), reference(resourceId('Microsoft.Web/sites/slots', variables('siteName'), 'staging'), '2021-01-15', 'Full').identity.principalId,'t')]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            }
          },
          {
            "tenantId": "[subscription().tenantid]",
            "objectId": "[if(equals(parameters('useStagingSlots'), 'true' ), reference(resourceId('Microsoft.Web/sites/slots', variables('functionsAppName'), 'staging'), '2021-01-15', 'Full').identity.principalId,'t')]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Web/sites/slots', variables('siteName'), 'staging')]",
        "[resourceId('Microsoft.Web/sites/slots', variables('functionsAppName'), 'staging')]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "name": "[variables('serverfarmsName')]",
      "apiVersion": "2018-02-01",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "kind": "[parameters('appServicePlanKind')]",
      "properties": {
        "reserved": true,
        "name": "[variables('serverfarmsName')]"
      },
      "sku": {
        "name": "[parameters('appServicePlanSku')]",
        "capacity": "[parameters('appServicePlanDefaultInstanceCount')]"
      }
    },
    {
      "type": "Microsoft.Insights/autoscalesettings",
      "name": "[variables('serverfarmsAutoScaleName')]",
      "condition": "[parameters('autoScaling').enabled]",
      "apiVersion": "2014-04-01",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('serverfarmsName'))]"
      ],
      "properties": {
        "enabled": true,
        "targetResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('serverfarmsName'))]",
        "profiles": [
          {
            "name": "[concat('default-', variables('serverfarmsAutoScaleName'))]",
            "capacity": {
              "minimum": "[parameters('autoScaling').minimumCapacity]",
              "maximum": "[parameters('autoScaling').maximumCapacity]",
              "default": "[parameters('appServicePlanDefaultInstanceCount')]"
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('serverfarmsName'))]",
                  "timeGrain": "PT5M",
                  "statistic": "Average",
                  "timeWindow": "PT10M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": "[parameters('autoScaling').scaleUpCPUThresholdPercentage]"
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": "[parameters('autoScaling').scaleUpIncreaseBy]",
                  "cooldown": "[parameters('autoScaling').scaleUpCooldown]"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "MemoryPercentage",
                  "metricResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('serverfarmsName'))]",
                  "timeGrain": "PT5M",
                  "statistic": "Average",
                  "timeWindow": "PT10M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": "[parameters('autoScaling').scaleUpMemoryThresholdPercentage]"
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": "[parameters('autoScaling').scaleUpIncreaseBy]",
                  "cooldown": "[parameters('autoScaling').scaleUpCooldown]"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('serverfarmsName'))]",
                  "timeGrain": "PT5M",
                  "statistic": "Average",
                  "timeWindow": "PT10M",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": "[parameters('autoScaling').scaleDownCPUThresholdPercentage]"
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": "[parameters('autoScaling').scaleDownDecreaseBy]",
                  "cooldown": "[parameters('autoScaling').scaleDownCooldown]"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "MemoryPercentage",
                  "metricResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('serverfarmsName'))]",
                  "timeGrain": "PT5M",
                  "statistic": "Average",
                  "timeWindow": "PT10M",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": "[parameters('autoScaling').scaleDownMemoryThresholdPercentage]"
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": "[parameters('autoScaling').scaleDownDecreaseBy]",
                  "cooldown": "[parameters('autoScaling').scaleDownCooldown]"
                }
              }
            ]
          }
        ]
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "name": "[variables('siteName')]",
      "apiVersion": "2018-11-01",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "kind": "app,linux",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('serverfarmsName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "clientAffinityEnabled": false,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('serverfarmsName'))]",
        "httpsOnly": true,
        "siteconfig": {
          "alwaysOn": true,
          "http20Enabled": true,
          "linuxFxVersion": "DOTNETCORE|6.0",
          "minTlsVersion": "1.2",
          "remoteDebuggingEnabled": false,
          "ftpsState": "Disabled",
          "use32BitWorkerProcess": false,
          "healthCheckPath": "/api/info",
          "metadata": [
            {
              "name": "CURRENT_STACK",
              "value": "dotnetcore"
            }
          ],
          "autoHealEnabled": true,
          "autoHealRules": {
            "triggers": {
              "statusCodes": [
                {
                  "status": 500,
                  "subStatus": 0,
                  "count": 5,
                  "timeInterval": "00:01:00"
                }
              ]
            },
            "actions": {
              "actionType": "Recycle",
              "minProcessExecutionTime": "00:01:00"
            }
          }
        }
      },
      "resources": [
        {
          "type": "config",
          "name": "logs",
          "apiVersion": "2021-01-15",
          "location": "[parameters('location')]",
          "tags": "[variables('tags')]",
          "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "[resourceId('Microsoft.Web/sites', variables('siteName'))]"
          ],
          "properties": {
            "applicationLogs": {
              "azureBlobStorage": {
                "level": "[parameters('diagnosticsLogsLevel')]",
                "sasUrl": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))).primaryEndpoints.blob, variables('webLogsContainerName'), '?', listAccountSas(variables('storageAccountName'), '2021-04-01', variables('containerSasRequestContent')).accountSasToken)]",
                "retentionInDays": "[parameters('diagnosticsLogsRetentionInDays')]"
              }
            },
            "httpLogs": {
              "azureBlobStorage": {
                "enabled": true,
                "sasUrl": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))).primaryEndpoints.blob, variables('webLogsContainerName'), '?', listAccountSas(variables('storageAccountName'), '2021-04-01', variables('containerSasRequestContent')).accountSasToken)]",
                "retentionInDays": "[parameters('diagnosticsLogsRetentionInDays')]"
              }
            }
          }
        },
        {
          "type": "config",
          "name": "appsettings",
          "apiVersion": "2020-12-01",
          "location": "[parameters('location')]",
          "tags": "[variables('tags')]",
          "dependsOn": [
            "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
            "[resourceId('Microsoft.Web/sites', variables('siteName'))]",
            "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
          ],
          "properties": {
            "ASPNETCORE_ENVIRONMENT": "[parameters('environment')]",
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2020-02-02').InstrumentationKey]",
            "ApplicationInsightsAgent_EXTENSION_VERSION": "~2",
            "XDT_MicrosoftApplicationInsights_Mode": "recommended",
            "KeyVault": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2021-04-01-preview').vaultUri]"
          }
        },
        {
          "type": "config",
          "name": "connectionstrings",
          "apiVersion": "2021-01-15",
          "location": "[parameters('location')]",
          "tags": "[variables('tags')]",
          "dependsOn": [
            "[resourceId('Microsoft.Cache/Redis', variables('cacheName'))]",
            "[resourceId('Microsoft.AppConfiguration/configurationStores', variables('configStoreName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "[resourceId('Microsoft.Web/sites', variables('siteName'))]"
          ],
          "properties": {
            "AppConfig": {
              "value": "[listKeys(resourceId('Microsoft.AppConfiguration/configurationStores', variables('configStoreName')), '2021-03-01-preview').value[0].connectionString]",
              "type": "Custom"
            },
            "Storage": {
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'),';AccountKey=', concat(listKeys(variables('storageAccountName'), '2021-04-01').keys[0].value))]",
              "type": "Custom"
            },
            "Cache": {
              "value": "[concat(variables('cacheName'),'.redis.cache.windows.net,abortConnect=false,ssl=true,password=', listKeys(resourceId('Microsoft.Cache/Redis', variables('cacheName')), '2020-12-01').primaryKey)]",
              "type": "Custom"
            }
          }
        },
        {
          "apiVersion": "2021-01-15",
          "name": "slotConfigNames",
          "type": "config",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('siteName'))]"
          ],
          "properties": {
            "connectionStringNames": [
              "AppConfig",
              "Storage",
              "Cache"
            ],
            "appSettingNames": [
              "KeyVault"
            ]
          }
        }
      ]
    },
    {
      "type": "Microsoft.Web/sites/slots",
      "name": "[concat(variables('siteName'), '/staging')]",
      "condition": "[parameters('useStagingSlots')]",
      "apiVersion": "2018-11-01",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "kind": "app,linux",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('serverfarmsName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('serverfarmsName'))]"
      },
      "resources": [
        {
          "type": "config",
          "name": "logs",
          "condition": "[parameters('useStagingSlots')]",
          "apiVersion": "2021-01-15",
          "location": "[parameters('location')]",
          "tags": "[variables('tags')]",
          "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('slotsStorageAccountName'))]",
            "[resourceId('Microsoft.Web/sites/slots', variables('siteName'), 'staging')]"
          ],
          "properties": {
            "applicationLogs": {
              "azureBlobStorage": {
                "level": "[parameters('diagnosticsLogsLevel')]",
                "sasUrl": "[if(equals(parameters('useStagingSlots'), 'true' ), concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('slotsStorageAccountName')),'2021-04-01').primaryEndpoints.blob, variables('webLogsContainerName'), '?', listAccountSas(variables('slotsStorageAccountName'), '2021-04-01', variables('containerSasRequestContent')).accountSasToken),'not evaluated when no slots use')]",
                "retentionInDays": "[parameters('diagnosticsLogsRetentionInDays')]"
              }
            },
            "httpLogs": {
              "azureBlobStorage": {
                "enabled": true,
                "sasUrl": "[if(equals(parameters('useStagingSlots'), 'true' ), concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('slotsStorageAccountName')),'2021-04-01').primaryEndpoints.blob, variables('webLogsContainerName'), '?', listAccountSas(variables('slotsStorageAccountName'), '2021-04-01', variables('containerSasRequestContent')).accountSasToken),'not evaluated when no slots use')]",
                "retentionInDays": "[parameters('diagnosticsLogsRetentionInDays')]"
              }
            }
          }
        },
        {
          "type": "config",
          "name": "appsettings",
          "condition": "[parameters('useStagingSlots')]",
          "apiVersion": "2020-12-01",
          "location": "[parameters('location')]",
          "tags": "[variables('tags')]",
          "dependsOn": [
            "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
            "[resourceId('Microsoft.Web/sites/slots', variables('siteName'), 'staging')]",
            "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
          ],
          "properties": {
            "ASPNETCORE_ENVIRONMENT": "[parameters('environment')]",
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2020-02-02').InstrumentationKey]",
            "ApplicationInsightsAgent_EXTENSION_VERSION": "~2",
            "XDT_MicrosoftApplicationInsights_Mode": "recommended",
            "KeyVault": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2021-04-01-preview').vaultUri]"
          }
        },
        {
          "type": "config",
          "name": "connectionstrings",
          "condition": "[parameters('useStagingSlots')]",
          "apiVersion": "2021-01-15",
          "location": "[parameters('location')]",
          "tags": "[variables('tags')]",
          "dependsOn": [
            "[resourceId('Microsoft.Cache/Redis', variables('cacheName'))]",
            "[resourceId('Microsoft.AppConfiguration/configurationStores', variables('configStoreName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts', variables('slotsStorageAccountName'))]",
            "[resourceId('Microsoft.Web/sites/slots', variables('siteName'), 'staging')]"
          ],
          "properties": {
            "AppConfig": {
              "value": "[listKeys(resourceId('Microsoft.AppConfiguration/configurationStores', variables('configStoreName')), '2021-03-01-preview').value[0].connectionString]",
              "type": "Custom"
            },
            "Storage": {
              "value": "[if(equals(parameters('useStagingSlots'), 'true' ),concat('DefaultEndpointsProtocol=https;AccountName=', variables('slotsStorageAccountName'),';AccountKey=', concat(listKeys(variables('slotsStorageAccountName'), '2021-04-01').keys[0].value)),'not evaluated when no slots use')]",
              "type": "Custom"
            },
            "Cache": {
              "value": "[concat(variables('cacheName'),'.redis.cache.windows.net,abortConnect=false,ssl=true,password=', listKeys(resourceId('Microsoft.Cache/Redis', variables('cacheName')), '2020-12-01').primaryKey)]",
              "type": "Custom"
            }
          }
        }
      ]
    },
    {
      "type": "Microsoft.Insights/webtests",
      "name": "[concat(variables('appInsightsName'), '-webtest-', variables('siteName'))]",
      "apiVersion": "2015-05-01",
      "location": "[parameters('location')]",
      "tags": {
        "[concat('hidden-link:', resourceId('microsoft.insights/components/', variables('appInsightsName')))]": "Resource"
      },
      "dependsOn": [
        "[variables('appInsightsName')]",
        "[resourceId('Microsoft.Web/sites', variables('siteName'))]"
      ],
      "properties": {
        "Name": "[concat(variables('appInsightsName'), '-webtest-', variables('siteName'))]",
        "SyntheticMonitorId": "[concat(variables('appInsightsName'), '-webtest-', variables('siteName'))]",
        "Enabled": true,
        "Frequency": 300,
        "Timeout": 120,
        "Kind": "ping",
        "RetryEnabled": false,
        "Locations": "[parameters('webTestsLocations')]",
        "Configuration": {
          "WebTest": "[concat('<WebTest Name=\"Health checks\" Id=\"7c86e527-16e6-42f4-9873-d7ac0e0791df\" Enabled=\"True\" CssProjectStructure=\"\" CssIteration=\"\" Timeout=\"120\" WorkItemIds=\"\" xmlns=\"http://microsoft.com/schemas/VisualStudio/TeamTest/2010\" Description=\"\" CredentialUserName=\"\" CredentialPassword=\"\" PreAuthenticate=\"True\" Proxy=\"default\" StopOnError=\"False\" RecordedResultFile=\"\" ResultsLocale=\"\"><Items><Request Method=\"GET\" Guid=\"a8a3f2ed-acf8-619f-c0bc-f5b4908bb1d9\" Version=\"1.1\" Url=\"https://', reference(resourceId('Microsoft.Web/sites', variables('siteName')), '2021-01-15').defaultHostName, '/api/health\" ThinkTime=\"0\" Timeout=\"120\" ParseDependentRequests=\"False\" FollowRedirects=\"True\" RecordResult=\"True\" Cache=\"False\" ResponseTimeGoal=\"0\" Encoding=\"utf-8\" ExpectedHttpStatusCode=\"200\" ExpectedResponseUrl=\"\" ReportingName=\"\" IgnoreHttpStatusCode=\"False\" /></Items></WebTest>')]"
        }
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "name": "[variables('functionsAppName')]",
      "apiVersion": "2018-11-01",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "kind": "functionapp,linux",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Web/serverfarms', variables('serverfarmsName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "reserved": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('serverfarmsName'))]",
        "siteConfig": {
          "linuxFxVersion": "DOTNETCORE|6.0",
          "alwaysOn": true,
          "http20Enabled": true,
          "minTlsVersion": "1.2",
          "remoteDebuggingEnabled": false,
          "ftpsState": "Disabled",
          "use32BitWorkerProcess": false,
          "healthCheckPath": "/api/info",
          "metadata": [
            {
              "name": "CURRENT_STACK",
              "value": "dotnetcore"
            }
          ],
          "autoHealEnabled": true,
          "autoHealRules": {
            "triggers": {
              "statusCodes": [
                {
                  "status": 500,
                  "subStatus": 0,
                  "count": 5,
                  "timeInterval": "00:01:00"
                }
              ]
            },
            "actions": {
              "actionType": "Recycle",
              "minProcessExecutionTime": "00:01:00"
            }
          }
        }
      },
      "resources": [
        {
          "type": "config",
          "name": "logs",
          "apiVersion": "2021-01-15",
          "location": "[parameters('location')]",
          "tags": "[variables('tags')]",
          "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "[resourceId('Microsoft.Web/sites', variables('functionsAppName'))]"
          ],
          "properties": {
            "applicationLogs": {
              "azureBlobStorage": {
                "level": "[parameters('diagnosticsLogsLevel')]",
                "sasUrl": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))).primaryEndpoints.blob, variables('webLogsContainerName'), '?', listAccountSas(variables('storageAccountName'), '2021-04-01', variables('containerSasRequestContent')).accountSasToken)]",
                "retentionInDays": "[parameters('diagnosticsLogsRetentionInDays')]"
              }
            },
            "httpLogs": {
              "azureBlobStorage": {
                "enabled": true,
                "sasUrl": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))).primaryEndpoints.blob, variables('webLogsContainerName'), '?', listAccountSas(variables('storageAccountName'), '2021-04-01', variables('containerSasRequestContent')).accountSasToken)]",
                "retentionInDays": "[parameters('diagnosticsLogsRetentionInDays')]"
              }
            }
          }
        },
        {
          "type": "config",
          "name": "appsettings",
          "apiVersion": "2020-12-01",
          "location": "[parameters('location')]",
          "tags": "[variables('tags')]",
          "dependsOn": [
            "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
            "[resourceId('Microsoft.Web/sites', variables('functionsAppName'))]",
            "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
          ],
          "properties": {
            "ASPNETCORE_ENVIRONMENT": "[parameters('environment')]",
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2020-02-02').InstrumentationKey]",
            "FUNCTIONS_EXTENSION_VERSION": "~4",
            "FUNCTIONS_WORKER_RUNTIME": "dotnet",
            "AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-04-01').keys[0].value,';')]",
            "KeyVault": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2021-04-01-preview').vaultUri]"
          }
        },
        {
          "type": "config",
          "name": "connectionstrings",
          "apiVersion": "2021-01-15",
          "location": "[parameters('location')]",
          "tags": "[variables('tags')]",
          "dependsOn": [
            "[resourceId('Microsoft.Cache/Redis', variables('cacheName'))]",
            "[resourceId('Microsoft.AppConfiguration/configurationStores', variables('configStoreName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "[resourceId('Microsoft.Web/sites', variables('functionsAppName'))]"
          ],
          "properties": {
            "AppConfig": {
              "value": "[listKeys(resourceId('Microsoft.AppConfiguration/configurationStores', variables('configStoreName')), '2021-03-01-preview').value[0].connectionString]",
              "type": "Custom"
            },
            "Storage": {
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'),';AccountKey=', concat(listKeys(variables('storageAccountName'), '2021-04-01').keys[0].value))]",
              "type": "Custom"
            },
            "Cache": {
              "value": "[concat(variables('cacheName'),'.redis.cache.windows.net,abortConnect=false,ssl=true,password=', listKeys(resourceId('Microsoft.Cache/Redis', variables('cacheName')), '2020-12-01').primaryKey)]",
              "type": "Custom"
            }
          }
        }
      ]
    },
    {
      "type": "Microsoft.Web/sites/slots",
      "name": "[concat(variables('functionsAppName'), '/staging')]",
      "condition": "[parameters('useStagingSlots')]",
      "apiVersion": "2018-11-01",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('serverfarmsName'))]"
      ],
      "kind": "functionapp,linux",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "reserved": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('serverfarmsName'))]",
        "siteConfig": {
          "linuxFxVersion": "DOTNETCORE|6.0",
          "alwaysOn": true,
          "http20Enabled": true,
          "minTlsVersion": "1.2",
          "ftpsState": "Disabled"
        }
      },
      "resources": [
        {
          "type": "config",
          "name": "logs",
          "condition": "[parameters('useStagingSlots')]",
          "apiVersion": "2021-01-15",
          "location": "[parameters('location')]",
          "tags": "[variables('tags')]",
          "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('slotsStorageAccountName'))]",
            "[resourceId('Microsoft.Web/sites/slots', variables('functionsAppName'), 'staging')]"
          ],
          "properties": {
            "applicationLogs": {
              "azureBlobStorage": {
                "level": "[parameters('diagnosticsLogsLevel')]",
                "sasUrl": "[if(equals(parameters('useStagingSlots'), 'true' ), concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('slotsStorageAccountName')),'2021-04-01').primaryEndpoints.blob, variables('webLogsContainerName'), '?', listAccountSas(variables('slotsStorageAccountName'), '2021-04-01', variables('containerSasRequestContent')).accountSasToken),'not evaluated when no slots use')]",
                "retentionInDays": "[parameters('diagnosticsLogsRetentionInDays')]"
              }
            },
            "httpLogs": {
              "azureBlobStorage": {
                "enabled": true,
                "sasUrl": "[if(equals(parameters('useStagingSlots'), 'true' ), concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('slotsStorageAccountName')),'2021-04-01').primaryEndpoints.blob, variables('webLogsContainerName'), '?', listAccountSas(variables('slotsStorageAccountName'), '2021-04-01', variables('containerSasRequestContent')).accountSasToken),'not evaluated when no slots use')]",
                "retentionInDays": "[parameters('diagnosticsLogsRetentionInDays')]"
              }
            }
          }
        },
        {
          "type": "config",
          "name": "appsettings",
          "condition": "[parameters('useStagingSlots')]",
          "apiVersion": "2020-12-01",
          "location": "[parameters('location')]",
          "tags": "[variables('tags')]",
          "dependsOn": [
            "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
            "[resourceId('Microsoft.Web/sites/slots', variables('functionsAppName'), 'staging')]",
            "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts', variables('slotsStorageAccountName'))]"
          ],
          "properties": {
            "ASPNETCORE_ENVIRONMENT": "[parameters('environment')]",
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')),'2020-02-02').InstrumentationKey]",
            "FUNCTIONS_EXTENSION_VERSION": "~4",
            "FUNCTIONS_WORKER_RUNTIME": "dotnet",
            "AzureWebJobsStorage": "[if(equals(parameters('useStagingSlots'), 'true' ),concat('DefaultEndpointsProtocol=https;AccountName=',variables('slotsStorageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('slotsStorageAccountName')), '2021-04-01').keys[0].value,';'),'not evaluated when no slots use')]",
            "KeyVault": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2021-04-01-preview').vaultUri]"
          }
        },
        {
          "type": "config",
          "name": "connectionstrings",
          "condition": "[parameters('useStagingSlots')]",
          "apiVersion": "2021-01-15",
          "location": "[parameters('location')]",
          "tags": "[variables('tags')]",
          "dependsOn": [
            "[resourceId('Microsoft.Cache/Redis', variables('cacheName'))]",
            "[resourceId('Microsoft.AppConfiguration/configurationStores', variables('configStoreName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts', variables('slotsStorageAccountName'))]",
            "[resourceId('Microsoft.Web/sites/slots', variables('functionsAppName'), 'staging')]"
          ],
          "properties": {
            "AppConfig": {
              "value": "[listKeys(resourceId('Microsoft.AppConfiguration/configurationStores', variables('configStoreName')), '2021-03-01-preview').value[0].connectionString]",
              "type": "Custom"
            },
            "Storage": {
              "value": "[if(equals(parameters('useStagingSlots'), 'true' ),concat('DefaultEndpointsProtocol=https;AccountName=', variables('slotsStorageAccountName'),';AccountKey=', concat(listKeys(variables('slotsStorageAccountName'), '2021-04-01').keys[0].value)),'not evaluated when no slots use')]",
              "type": "Custom"
            },
            "Cache": {
              "value": "[concat(variables('cacheName'),'.redis.cache.windows.net,abortConnect=false,ssl=true,password=', listKeys(resourceId('Microsoft.Cache/Redis', variables('cacheName')), '2020-12-01').primaryKey)]",
              "type": "RedisCache"
            }
          }
        }
      ]
    }
  ],
  "outputs": {
    "siteUrl": {
      "type": "string",
      "value": "[concat('https://', reference(resourceId('Microsoft.Web/sites/', variables('siteName')), '2021-01-15').defaultHostName)]"
    },
    "functionsUrl": {
      "type": "string",
      "value": "[concat('https://', reference(resourceId('Microsoft.Web/sites/', variables('functionsAppName')), '2021-01-15').defaultHostName)]"
    }
  }
}